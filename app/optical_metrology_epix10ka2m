#!/usr/bin/env python
#--------------------
""" Created on 2019-01-24 by Mikhail Dubrovin
    2020-03-12 add parameter --rot to account for location of the Q0 in optical measurements.
               expected detector orientation with Q0 in upper-left corner is shown on photo
               Confluence PSDM EPIX10KA2M and EPIX10KAQUAD - Metrology map from ChrisKenney
               Metrology from 2020-02-25 was done with Q0 in the lower-left corner...
"""
import os
import sys
import logging
logger = logging.getLogger(__name__)

#logging.basicConfig(format='%(levelname)s: %(name)s %(message)s', level=logging.DEBUG)
#logging.basicConfig(format='%(asctime)s.%(msecs)03d %(name)s %(levelname)s: %(message)s',\
#                    datefmt='%Y-%m-%dT%H:%M:%S',\
#                    level=logging.DEBUG) #filename='example.log', filemode='w'

LEVEL_NAMES = [name for name in logging._levelNames.keys() if isinstance(name, str)]
#LEVEL_NAMES = ', '.join(list(logging._levelToName.values())) # PYTHON 3

#print LEVEL_NAMES
#print 'dir(logging):\n', dir(logging)
#print logging.DEBUG, logging.getLevelName(logging.DEBUG)

#--------------------

def str_command_line(cmt='Command:\n') :
    """Returns (str) command line with preceded comment.
    """
    return '%s%s' % (cmt, ' '.join(sys.argv))

#--------------------

def default_constants_epix10ka2m() :
    # HDR PARENT IND     OBJECT IND    X0[um]   Y0[um]   Z0[um]   ROT-Z ROT-Y ROT-X     TILT-Z   TILT-Y   TILT-X
    SENSOR   = 'EPIX10KA:V1'
    QUAD     = 'QUAD'
    CAMERA   = 'CAMERA'
    IP       = 'IP'
    return (
        (QUAD  , 0,    SENSOR, 0,    -20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 0,    SENSOR, 1,     20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 0,    SENSOR, 2,    -20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 0,    SENSOR, 3,     20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\

        (QUAD  , 1,    SENSOR, 0,    -20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 1,    SENSOR, 1,     20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 1,    SENSOR, 2,    -20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 1,    SENSOR, 3,     20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\

        (QUAD  , 2,    SENSOR, 0,    -20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 2,    SENSOR, 1,     20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 2,    SENSOR, 2,    -20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 2,    SENSOR, 3,     20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\

        (QUAD  , 3,    SENSOR, 0,    -20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 3,    SENSOR, 1,     20150,    20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 3,    SENSOR, 2,    -20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\
        (QUAD  , 3,    SENSOR, 3,     20150,   -20950,        0,     180,     0,     0,    0,  0,  0),\

        (CAMERA, 0,    QUAD  , 0,    -38450,    42850,        0,      90,     0,     0,    0,  0,  0),\
        (CAMERA, 0,    QUAD  , 1,     42850,    38450,        0,       0,     0,     0,    0,  0,  0),\
        (CAMERA, 0,    QUAD  , 2,     38450,   -42850,        0,     270,     0,     0,    0,  0,  0),\
        (CAMERA, 0,    QUAD  , 3,    -42850,   -38450,        0,     180,     0,     0,    0,  0,  0),\

        (IP    , 0,    CAMERA, 0,         0,        0,  1000000,      90,     0,     0,    0,  0,  0)\
    )

#--------------------

class OpticalMetrologyEpix10ka2M() :
    """Optical metrology measurements processing for Epix10ka2M"""

    def __init__(self) :
        self._name = self.__class__.__name__
        self.init_parameters()
        self.proc_optical_metrology_data()

    def init_parameters(self) :
        print str_command_line()
        self.parser = option_parser()
        (popts, pargs) = self.parser.parse_args()
        self.ifname = pargs[0] if len(pargs) else popts.ifn # popts['ifn']
        self.ofpref = popts.ofp # popts['ofp']
        self.ofname = '%s.txt' % self.ofpref
        self.xc     = popts.xc
        self.yc     = popts.yc
        self.rot    = popts.rot
        self.loglev = popts.log

	loglevel = logging._levelNames.get(self.loglev, 'DEBUG')
        logging.basicConfig(format='%(levelname)s: %(message)s', level=loglevel)
	print 'Logging level %s' % logging.getLevelName(loglevel)

    def proc_optical_metrology_data(self) :
        from CalibManager.OpticAlignmentUtils import\
             read_optical_metrology_file,\
             make_table_of_segments,\
             check_points_numeration,\
             print_quality_check_tables,\
             geometry_constants,\
             str_geo_constants,\
             str_comment,\
             str_geo_constants_hat,\
             create_directory,\
             save_textfile

        NSEGS_IN_QUAD_EPIX10KA2M = 4
        METROLOGY_SEGNUMS_IN_DAQ = ((0,1,3,2),\
                                    (2,0,1,3),\
                                    (3,2,0,1),\
                                    (1,3,2,0))

        QUAD_ORIENTATION_DEG = (-90,0,90,180)
        SEG_XY_ORIGIN_EPIX10KA2M = (1,1,1,1, 2,2,2,2, 3,3,3,3, 0,0,0,0) # metrology point index in range [0,3]

	if self.rot == 3 :
            QUAD_ORIENTATION_DEG = (180,-90,0,90)
            SEG_XY_ORIGIN_EPIX10KA2M = (0,0,0,0, 1,1,1,1, 2,2,2,2, 3,3,3,3) # metrology point index in range [0,3]

        DEF_CONSTANTS = default_constants_epix10ka2m()
        CENTER_OFFSET = (self.xc, self.yc)
        
        arr_points = read_optical_metrology_file(fname='optical_metrology.txt')
        logger.debug('Array of points:\n%s' % str(arr_points))
        
        arr_segs = make_table_of_segments(arr_points)
        logger.debug('Array of segments:\n%s' % str(arr_segs))
        
        check_points_numeration(arr_segs)
        
        print_quality_check_tables(arr_segs, SEG_XY_ORIGIN_EPIX10KA2M)
        
        logger.info('default constants:\n%s' % str_geo_constants(DEF_CONSTANTS))
        
        lst = geometry_constants(arr_segs, SEG_XY_ORIGIN_EPIX10KA2M, NSEGS_IN_QUAD_EPIX10KA2M,\
                                 QUAD_ORIENTATION_DEG, METROLOGY_SEGNUMS_IN_DAQ, DEF_CONSTANTS, CENTER_OFFSET)
        cons = str_geo_constants(lst)
        cmts = str_comment(('detector:Epix10ka2M experiment:abcd1234', 'constants generated from optical metrology'))
        hat  = str_geo_constants_hat()

	geo_cons = '%s%s\n%s' % (cmts, hat, cons)

        logger.info('geometry constants:\n%s' % geo_cons)

        dir = os.path.dirname(self.ofname)
        create_directory(dir, mode=0777)
        save_textfile(geo_cons, self.ofname, accmode=0660)
        logger.info('geometry constants saved in file %s' % self.ofname)

#--------------------

def usage() :
    return '\nCommand to run:'+\
           '\n  %prog'+\
           ' -i <input-file-name> -o <output-file-name> ...'+\
           '\n\n  Example:'+\
           '\n      %prog -i optical-metrology.txt -o results/optmet-2019-01-24'+\
           '\n      %prog -i optical-metrology.txt -r 3 -o results/optmet-2020-02-25'+\
           '\n  Alternative:'+\
           '\n      %prog optical-metrology.txt'

#--------------------

def option_parser() :

    from optparse import OptionParser

    d_ifn = './optical_metrology.txt'
    d_ofp = './geometry-epix10ka2m' 
    d_log = 'INFO'
    d_xc  = 78000
    d_yc  = -4150
    d_rot = 0
 
    h_ifn = 'input file name, default = %s' % d_ifn
    h_ofp = 'output file(s) prefix, default = %s' % d_ofp 
    h_log = 'logging level from list (%s), default = %s' % (LEVEL_NAMES, d_log)
    h_xc  = 'x coordinate [um] of camera center in optical frame, default = %d' % d_xc
    h_yc  = 'y coordinate [um] of camera center in optical frame, default = %d' % d_yc
    h_rot = 'detector rotation in optical metrology: 0-Q0 upper-left, 3-Q0 down-left , default = %s' % d_rot
 
    parser = OptionParser(description='Optical metrology processing for Epix10ka2M', usage=usage())
    parser.add_option('-i', '--ifn', default=d_ifn, action='store', type='string', help=h_ifn)
    parser.add_option('-o', '--ofp', default=d_ofp, action='store', type='string', help=h_ofp)
    parser.add_option('-l', '--log', default=d_log, action='store', type='string', help=h_log)
    parser.add_option('-x', '--xc',  default=d_xc,  action='store', type='int',    help=h_xc)
    parser.add_option('-y', '--yc',  default=d_yc,  action='store', type='int',    help=h_yc)
    parser.add_option('-r', '--rot', default=d_rot, action='store', type='int',    help=h_rot)

    return parser

#--------------------

if __name__ == '__main__' :
    OpticalMetrologyEpix10ka2M()
    sys.exit()

#--------------------
